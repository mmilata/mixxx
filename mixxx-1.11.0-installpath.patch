--- mixxx/build/mixxx.py	2012-09-05 05:35:20 +0000
+++ mixxx/build/mixxx.py	2013-05-26 16:19:35 +0000
@@ -219,7 +219,7 @@
         if os.environ.has_key('CC'):
             self.env['CC'] = os.environ['CC']
         if os.environ.has_key('CFLAGS'):
-            self.env['CFLAGS'] += SCons.Util.CLVar(os.environ['CFLAGS'])
+            self.env['CCFLAGS'] += SCons.Util.CLVar(os.environ['CFLAGS'])
         if os.environ.has_key('CXX'):
             self.env['CXX'] = os.environ['CXX']
         if os.environ.has_key('CXXFLAGS'):
@@ -227,6 +227,14 @@
         if os.environ.has_key('LDFLAGS'):
             self.env['LINKFLAGS'] += SCons.Util.CLVar(os.environ['LDFLAGS'])
 
+        # Allow installation directories to be specified.
+        if os.environ.has_key('LIBDIR'):
+            self.env['LIBDIR'] = os.environ['LIBDIR']
+        if os.environ.has_key('BINDIR'):
+            self.env['BINDIR'] = os.environ['BINDIR']
+        if os.environ.has_key('SHAREDIR'):
+            self.env['SHAREDIR'] = os.environ['SHAREDIR']
+
         # Initialize this as a list, fixes a bug where first CPPDEFINE would get
         # mangled
         self.env['CPPDEFINES'] = []

--- mixxx/src/SConscript	2013-04-27 04:04:25 +0000
+++ mixxx/src/SConscript	2013-05-26 16:56:32 +0000
@@ -247,9 +247,12 @@
                 #the compiled-in strings using /usr as the prefix. That's why we have install_root and flags['prefix'].
                 install_root = ARGUMENTS.get('install_root', flags['prefix'])
                 print "Install root: " + install_root
-                unix_share_path = os.path.join(install_root, 'share')
-                unix_bin_path = os.path.join(install_root, 'bin')
-                unix_lib_path = os.path.join(install_root, 'lib')
+                unix_share_path = env.get('SHAREDIR',
+				    default=os.path.join(install_root, 'share'))
+                unix_bin_path = env.get('BINDIR',
+				    default=os.path.join(install_root, 'bin'))
+                unix_lib_path = env.get('LIBDIR',
+				    default=os.path.join(install_root, 'lib'))
 
                 binary = env.Install(unix_bin_path, binary_files)
                 resource = env.Install(os.path.join(unix_share_path, 'mixxx'), resource_files)

